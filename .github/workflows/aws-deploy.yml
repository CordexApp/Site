name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main # Change this to your main branch name if different

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: cordex-site
  ECS_CLUSTER: cordex-site-cluster
  ECS_SERVICE: cordex-site-service
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: site-container
  CLOUDWATCH_LOG_GROUP: /ecs/cordex-site-task

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::471112508717:role/GitHubActionsECR-ECS
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure CloudWatch log group exists
        run: |
          aws logs describe-log-groups --log-group-name-prefix ${{ env.CLOUDWATCH_LOG_GROUP }} --region ${{ env.AWS_REGION }} || \
          aws logs create-log-group --log-group-name ${{ env.CLOUDWATCH_LOG_GROUP }} --region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
